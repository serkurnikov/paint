// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
)

// ScobelOKCode is the HTTP code returned for type ScobelOK
const ScobelOKCode int = 200

/*ScobelOK response

swagger:response scobelOK
*/
type ScobelOK struct {

	/*
	  In: Body
	*/
	Payload *ScobelOKBody `json:"body,omitempty"`
}

// NewScobelOK creates ScobelOK with default headers values
func NewScobelOK() *ScobelOK {

	return &ScobelOK{}
}

// WithPayload adds the payload to the scobel o k response
func (o *ScobelOK) WithPayload(payload *ScobelOKBody) *ScobelOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the scobel o k response
func (o *ScobelOK) SetPayload(payload *ScobelOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ScobelOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *ScobelOK) ScobelResponder() {}

/*ScobelDefault scobel default

swagger:response scobelDefault
*/
type ScobelDefault struct {
	_statusCode int
}

// NewScobelDefault creates ScobelDefault with default headers values
func NewScobelDefault(code int) *ScobelDefault {
	if code <= 0 {
		code = 500
	}

	return &ScobelDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the scobel default response
func (o *ScobelDefault) WithStatusCode(code int) *ScobelDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the scobel default response
func (o *ScobelDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *ScobelDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}

func (o *ScobelDefault) ScobelResponder() {}

type ScobelNotImplementedResponder struct {
	middleware.Responder
}

func (*ScobelNotImplementedResponder) ScobelResponder() {}

func ScobelNotImplemented() ScobelResponder {
	return &ScobelNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.Scobel has not yet been implemented",
		),
	}
}

type ScobelResponder interface {
	middleware.Responder
	ScobelResponder()
}
