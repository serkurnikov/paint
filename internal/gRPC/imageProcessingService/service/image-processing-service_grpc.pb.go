// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageProcessingServiceClient is the client API for ImageProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageProcessingServiceClient interface {
	PyrMeanShiftFiltering(ctx context.Context, in *PyrRequest, opts ...grpc.CallOption) (*PyrReply, error)
	DrawCountours(ctx context.Context, in *CountourRequest, opts ...grpc.CallOption) (*CountourReply, error)
}

type imageProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageProcessingServiceClient(cc grpc.ClientConnInterface) ImageProcessingServiceClient {
	return &imageProcessingServiceClient{cc}
}

func (c *imageProcessingServiceClient) PyrMeanShiftFiltering(ctx context.Context, in *PyrRequest, opts ...grpc.CallOption) (*PyrReply, error) {
	out := new(PyrReply)
	err := c.cc.Invoke(ctx, "/service.ImageProcessingService/PyrMeanShiftFiltering", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingServiceClient) DrawCountours(ctx context.Context, in *CountourRequest, opts ...grpc.CallOption) (*CountourReply, error) {
	out := new(CountourReply)
	err := c.cc.Invoke(ctx, "/service.ImageProcessingService/DrawCountours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageProcessingServiceServer is the server API for ImageProcessingService service.
// All implementations must embed UnimplementedImageProcessingServiceServer
// for forward compatibility
type ImageProcessingServiceServer interface {
	PyrMeanShiftFiltering(context.Context, *PyrRequest) (*PyrReply, error)
	DrawCountours(context.Context, *CountourRequest) (*CountourReply, error)
	mustEmbedUnimplementedImageProcessingServiceServer()
}

// UnimplementedImageProcessingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageProcessingServiceServer struct {
}

func (UnimplementedImageProcessingServiceServer) PyrMeanShiftFiltering(context.Context, *PyrRequest) (*PyrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PyrMeanShiftFiltering not implemented")
}
func (UnimplementedImageProcessingServiceServer) DrawCountours(context.Context, *CountourRequest) (*CountourReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawCountours not implemented")
}
func (UnimplementedImageProcessingServiceServer) mustEmbedUnimplementedImageProcessingServiceServer() {
}

// UnsafeImageProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageProcessingServiceServer will
// result in compilation errors.
type UnsafeImageProcessingServiceServer interface {
	mustEmbedUnimplementedImageProcessingServiceServer()
}

func RegisterImageProcessingServiceServer(s grpc.ServiceRegistrar, srv ImageProcessingServiceServer) {
	s.RegisterService(&ImageProcessingService_ServiceDesc, srv)
}

func _ImageProcessingService_PyrMeanShiftFiltering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PyrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceServer).PyrMeanShiftFiltering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ImageProcessingService/PyrMeanShiftFiltering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceServer).PyrMeanShiftFiltering(ctx, req.(*PyrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessingService_DrawCountours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceServer).DrawCountours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ImageProcessingService/DrawCountours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceServer).DrawCountours(ctx, req.(*CountourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageProcessingService_ServiceDesc is the grpc.ServiceDesc for ImageProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ImageProcessingService",
	HandlerType: (*ImageProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PyrMeanShiftFiltering",
			Handler:    _ImageProcessingService_PyrMeanShiftFiltering_Handler,
		},
		{
			MethodName: "DrawCountours",
			Handler:    _ImageProcessingService_DrawCountours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image-processing-service.proto",
}
